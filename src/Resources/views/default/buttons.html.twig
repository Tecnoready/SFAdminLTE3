{% extends "@SFAdminLTE3/default/base_macros.html.twig" %}

{% macro show_actions(params) %}
    {% import '@SFAdminLTE3/default/buttons.html.twig' as buttons %}

    {% set options = params|resolve_options(params,{ required: ["action_index","action_edit","action_delete","entity","role_index"] }) %}

    {{ buttons.return_to_list({href: options.action_index,role: options.role_index}) }}
    {% if options.action_delete is not null %}
        {{ buttons.delete({ entity: options.entity, action: options.action_delete }) }}
    {% endif %}
    {% if options.action_edit is not null %}
        {{ buttons.edit({href: options.action_edit,entity: options.entity }) }}
    {% endif %}
{% endmacro show_actions %}

{#Botnones estandar de nuevo elemento#}
{% macro new_actions(params) %}
    {% import '@SFAdminLTE3/default/buttons.html.twig' as buttons %}

    {% set options = params|resolve_options(params,{ required: ["action_index","role_index","role_new"] }) %}

    {{ buttons.return_to_list({href: options.action_index,role: options.role_index}) }}
    {{ buttons.save_new({role:options.role_new}) }}
    {{ buttons.save_and_close({action: options.action_index,role:options.role_new }) }}
{% endmacro new_actions %}

{#Botones estandar de edicion#}
{% macro edit_actions(params) %}
    {% import '@SFAdminLTE3/default/buttons.html.twig' as buttons %}

    {% set options = params|resolve_options(params,{ required: ["action_index","action_delete","action_show","entity","role_index"] }) %}

    {{ buttons.return_to_list({href: options.action_index,role: options.role_index}) }}
    {{ buttons.a({
        label: "button.list.show",
        href: options.action_show,
        class: "btn btn-link btn-sm",
        icon: "fas fa-eye",
        icon_separator: "mr-1",
        role: options.role_show
        }) 
    }}
    {{ buttons.delete({ entity: options.entity, action: options.action_delete}) }}

    {{ buttons.save({role: {attributes: "EDIT",subject:options.entity } }) }}
    {{ buttons.save_and_close({action: options.action_show,role: {attributes: "EDIT", subject: options.entity} }) }}
{% endmacro edit_actions %}

{# Botones de lista #}
{% macro list_actions(params) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import a as a %}
    {% set options = { action_edit: null }|resolve_options(params,{ required: ["action_show","action_edit","entity"] }) %}

    {% if options.action_show is not null %}
        {{ a({
        label: "button.list.show",
        href: options.action_show,
        class: "btn btn-link btn-sm",
        icon: "fas fa-eye",
        icon_separator: "mr-1",
        role: {attributes: "SHOW",subject:options.entity },
        }) 
        }}
    {% endif %}

    {% if options.action_edit is not null %}
        {{ a({
            label: "button.list.edit",
            href: options.action_edit,
            class: "btn btn-link btn-sm",
            icon: "fas fa-edit",
            icon_separator: "mr-1",
            role: {attributes: "EDIT",subject:options.entity },
            }) 
        }}
    {% endif %}
{% endmacro list_actions %}

{# Boton de nuevo elemento #}
{% macro new(params) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import save as save %}
    {% set options = {label: "button.new",class: "btn btn-primary" }|resolve_options(params,{ required: ["href","label","class","role"] }) %}

    {% from '@SFAdminLTE3/default/buttons.html.twig' import a as a %}
    {{ a({
        label: options.label,
        href: options.href,
        class: options.class,
        icon: "fas fa-plus",
        role: options.role,
        }) 
    }}
{% endmacro new %}

{# Boton de guardado de un nuevo elemento #}
{% macro save_new(params) %}
    {% set options = {label: "button.save"}|resolve_options(params,{ required: ["role"] }) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import save as save %}
    {{ save({
        uri: constant('App\\Controller\\BaseController::ACTION_SAVE_NEW_VALUE'),
        role: options.role,
        label: options.label
    }) }}
{% endmacro save_new %}

{# Boton de guardar #}
{% macro save(params) %}
    {% set options = {uri: app.request.requestUri,label: "button.save"}|resolve_options(params,{ required: ["uri","role"] }) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import button as button %}
    {{ button({
        label: options.label,
        class: "btn btn-primary",
        type: "submit",
        icon: "fas fa-save",
        attr: { form: "form_main",name: constant('App\\Controller\\BaseController::ACTION_SAVE') , value: options.uri },
    }) }}
{% endmacro save %}

{# Boton de editar #}
{% macro edit(params) %}
    {% set options = {}|resolve_options(params,{ required: ["entity","href"] }) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import a as a %}
    {% set params = {
        label: "button.edit",
        class: "btn btn-primary",
        icon: "fas fa-edit",
        href: options.href,
        role: {attributes: "EDIT", subject: options.entity},
    } %}
    {{ a(params) }}
{% endmacro edit %}

{# Boton de guardar y cerrar #}
{% macro save_and_close(params) %}
    {% set options = {}|resolve_options(params,{ required: ["action","role"] }) %}

    {% from '@SFAdminLTE3/default/buttons.html.twig' import button as button %}

    {{ button({
        label: "button.save_and_close",
        class: "btn btn-primary",
        type: "submit",
        icon: "fas fa-list",
        icon_prepend: "fas fa-save mr-1",
        role: options.role,
        attr: { form: "form_main",name:constant('App\\Controller\\BaseController::ACTION_SAVE'), value: options.action },
    }) }}

{% endmacro save_and_close %}

{# Boton de retornar a la lista #}
{% macro return_to_list(params) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import a as a %}
    {% set params = (params|default({}))|merge({
        label: "button.return_to_list",
        class: "btn btn-link",
        icon: "fas fa-list",
    }) %}
    {{ a(params) }}
{% endmacro return_to_list %}

{# Boton de cancelar #}
{% macro cancel(params) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import a as a %}
    {% set params = (params|default({}))|merge({
        label: "button.cancel",
        class: "btn btn-cancel",
        icon: "fas fa-undo",
    }) %}
    {{ a(params) }}
{% endmacro cancel %}

{# Boton de elimiar con formulario con proteccion csrf #}
{% macro delete(params) %}
    {% set options = {role: null}|resolve_options(params,{ required: ["action","entity"] }) %}
    {% set role = { attributes: "DELETE",subject: options.entity,message: null }|resolve_options(options.role,{ required: ["attributes","subject"] }) %}
    {% from '@SFAdminLTE3/default/buttons.html.twig' import button as button %}

    {% set id = random() %}
    {% set formId = "form_delete_"~id %}
    {% set buttonId = "btn_delete_"~id %}
    {% if role.attributes is null or is_granted(role.attributes,role.subject) %}
        {#    Colocar el formulario de eliminar con confirmacion#}
        {#<form method="POST" action="{{ options.action }}" id="{{ formId }}">
            <input type="hidden" name="_method" value="DELETE">
            <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ options.entity.id) }}">
            <input type="hidden" name="_referer" value="{{ app.request.requestUri }}">
        </form>#}
        {% set id_token = random() %}
        <form method="POST" action="{{ options.action }}" id="{{ formId }}">
            <input type="hidden" name="_method" value="DELETE">
            <input type="hidden" name="_token" value="{{ csrf_token('action-'~id_token~ options.entity.id) }}">
            <input type="hidden" name="_check_token" value="{{ id_token }}">
            <input type="hidden" name="_referer" value="{{ app.request.requestUri }}">
        </form>
        {{ button({
            label: "button.delete",
            class: "btn btn-danger",
            icon: "fas fa-minus-circle",
            attr: {id: buttonId}
        }) }}
        <script>
            function init{{ formId }}() {
                $("#{{ buttonId }}").on("click", function () {
                    Swal.fire({
                        title: '{{ "question.item.delete.title"|trans }}',
                        text: "{{ "question.item.delete.text"|trans }}",
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: '{{ "question.button.item.delete.yes"|trans }}',
                        cancelButtonText: '{{ "question.button.item.delete.no"|trans }}',
                    }).then((result) => {
                        if (result.value) {
                            $("#{{ formId }}").submit();
                        }
                    });
                });
            }
            document.addEventListener("DOMContentLoaded", function (event) {
                init{{ formId }}();
            });
            if (document.readyState == "complete" || document.readyState == "interactive") {
                init{{ formId }}();
            }
        </script>
    {% else %}
        {{ button({
            label: "button.delete",
            class: "btn btn-danger disabled",
            icon: "fas fa-minus-circle",
            attr: {}
        }) }}
    {% endif %}

{% endmacro delete %}

{# Boton de accion con formulario con proteccion csrf #}
{% macro action(params) %}
    {% set options = { class: "btn btn-primary",icon: null,input: {},extra_name: "_extra",extra_value: null }|resolve_options(params,{ required: ["action","entity","label","question","role"] }) %}
    {% set question = { title: ("question.title"|trans),confirm_button_text: "question.button.yes",cancel_button_text: "question.button.no" }|resolve_options(options.question,{ required: ["text"] }) %}
    {% set input = { type: null,placeholder: "question.input.place_holder.observation",validator: "question.input.validator.observation" }|resolve_options(options.input,{ required: ["type"],allowedValues: { type: [null,"textarea"] } }) %}
    {% set role = { attributes: null,subject: null,message: null }|resolve_options(options.role,{ required: ["attributes","subject"] }) %}

    {% from '@SFAdminLTE3/default/buttons.html.twig' import button as button %}

    {% set icon = options.icon|default("fas fa-check") %}
    {% if options.icon is null %}
        {% if options.class == "btn btn-danger" %}
            {% set icon = "fas fa-times-circle" %}
        {% endif %}
    {% endif %}
    {% if role.attributes is null or is_granted(role.attributes,role.subject) %}
        {% set id = random() %}
        {% set id_token = random() %}
        {% set formId = "form_action_"~id %}
        {% set buttonId = "btn_action_"~id %}
        {% set extraId = "extra_"~id %}
        {#    Colocar el formulario de la accion con confirmacion#}
        <form method="POST" action="{{ options.action }}" id="{{ formId }}" style="display: inline;">
            <input type="hidden" name="_method" value="POST">
            <input type="hidden" name="_token" value="{{ csrf_token('action-'~id_token~ options.entity.id) }}">
            <input type="hidden" name="_check_token" value="{{ id_token }}">
            <input type="hidden" name="_referer" value="{{ app.request.requestUri }}">
            <input type="hidden" {% if options.extra_value is null %}id="{{ extraId }}"{% endif %} name="{{ options.extra_name }}" value="{{ options.extra_value }}">
        </form>
        {{ button({
                label: options.label,
                class: options.class,
                icon: icon,
                attr: {id: buttonId}
            }) }}
        <script>
            function init{{ formId }}() {
                $("#{{ buttonId }}").on("click", function () {
            {% if question.text is not null %}
                                Swal.fire({
                                    title: '{{ question.title }}',
                                    text: "{{ question.text }}",
                                    icon: 'question',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: '{{ question.confirm_button_text|trans }}',
                                    cancelButtonText: '{{ question.cancel_button_text|trans }}',
                {% if input.type is not null %}
                            input: '{{ input.type }}',
                            inputPlaceholder: '{{ input.placeholder|trans }}',
                            inputValidator: (value) => {
                                if (!value) {
                                    return '{{ input.validator|trans }}'
                                }
                            }
                {% endif %}
                        }).then((result) => {
                            if (result.value) {
                {#                        $('#{{ formId }} input[name=_extra]').val(result.value);#}
                                $('#{{ formId }} input[id={{ extraId }}]').val(result.value);
                                $("#{{ formId }}").submit();
                            }
                        });
            {% else %}
                {# Sino tiene confirmacion se ejecuta la accion                        #}
                                    $("#{{ formId }}").submit();
            {% endif %}
                                });
                            }
                            document.addEventListener("DOMContentLoaded", function (event) {
                                init{{ formId }}();
                            });
                            if (document.readyState == "complete" || document.readyState == "interactive") {
                                init{{ formId }}();
                            }
        </script>
    {% else %}
        {#        TODO deshabilitar boton si tiene texto o desaparecer#}
    {% endif %}
{% endmacro action %}


{# Constructor  de "button" generico #}
{% macro button(params) %}
    {% set defaults = { icon: null,icon_prepend:null, class: 'btn btn-primary',type: null,attr: {},role:{},popup:{},question: { title: null, text: null,on_confirm: null},btn_id: null } %}
    {% set options = defaults|resolve_options(params,{ allowedValues: { type: ['submit',"reset",null] },required: ["label"] }) %}
    {% set role = { attributes: null,subject: null,message: null }|resolve_options(options.role,{ required: ["attributes","subject"] }) %}
    {% set popup = { uri: null,loading_text: "popup.loading",confirm_button_text: "popup.button.confirm",cancel_button_text: "popup.button.cancel" }|resolve_options(options.popup,{ }) %}
    {% set question = { title: ("question.title"|trans),confirm_button_text: "question.button.yes",cancel_button_text: "question.button.no" }|resolve_options(options.question,{ required: ["text","on_confirm"] }) %}

    {% set id = options.btn_id|default(random()) %}
    {% set btnId = "btn_"~id %}
    {% set attr = options.attr %}
    {% set attr = {class: options.class,id: btnId}|merge(attr) %}
    {% if options.type %}
        {% set attr = attr|merge({type: options.type}) %}
    {% endif %}
    {% if role.attributes is null or is_granted(role.attributes,role.subject) %}
        <button {{ block('attributes') }}>{% if options.icon_prepend %}<i class="{{ options.icon_prepend }} mr-2"></i>{% endif %}<i class="{{ options.icon }} mr-2"></i>{{ options.label|trans }}</button>
                {% if popup.uri is not null %}
            <script>
                var init{{ btnId }} = function () {
                {% set uri = build_with_referer(popup.uri,app.request.requestUri) %}
                        $("#{{ btnId }}").on("click", function () {
                            var hide = function (elem) {
                                //Log("display: "+elem.css("display"));
                                //Log(elem);
                                elem.data("old_display", elem.css("display"));
                                elem.css("opacity", '');
                                elem.css("display", 'none');
                            };
                            var show = function (elem) {
                                //Log("old_display: "+elem.data("old_display"));
                                var oldDisplay = elem.data("old_display");
                                if (oldDisplay) {
                                    elem.css("opacity", '');
                                    elem.css("display", oldDisplay);
                                }
                            };
                            Swal.confirmButtonText = function (text) {
                                var confirmButton = $(Swal.getActions()).find(".swal2-confirm");
                                if (confirmButton) {
                                    confirmButton[0].innerHTML = text;
                                }
                            };
                            Swal.updateContent = function (data) {
                                Swal.update({
                                    //title: null,
                                    html: "...",
                                    showConfirmButton: true,
                                    showCancelButton: true,
                                });
                                $("#swal2-content").html(data);
                            };
                            Swal.loading = function () {
                                if (!Swal.isLoading()) {
                                    Swal.showLoading();
                                }
                                show($("#swal2-title"));
                                hide($("#swal2-content"));
                                hide($("button.swal2-cancel"));
                            };
                            Swal.done = function () {
                                if (Swal.isLoading()) {
                                    Swal.hideLoading();
                                }
                                show($("#swal2-content"));
                                show($("button.swal2-cancel"));
                                hide($("#swal2-title"));

                            };
                            Swal.sendAjaxForm = function (idForm) {
                                var resolvePromise = null;
                                var rejectPromise = null;
                                let miPrimeraPromise = new Promise((resolve, reject) => {
                                    resolvePromise = resolve;
                                    rejectPromise = reject;
                                    // Llamamos a resolve(...) cuando lo que estabamos haciendo finaliza con éxito, y reject(...) cuando falla.
                                });
                                var post_url = $("#" + idForm).attr("action"); //get form action url
                                var request_method = $("#" + idForm).attr("method"); //get form GET/POST method
                                var form_data = new FormData(document.getElementById(idForm)); //Creates new FormData object
                                $.ajax({
                                    url: post_url,
                                    type: request_method,
                                    data: form_data,
                                    contentType: false,
                                    cache: false,
                                    processData: false
                                }).done(function (response, textStatus, jqXHR) { //
                                    //Log(response);
                                    //Log(textStatus);
                                    //Log(jqXHR.status);
                                    Swal.updateContent(response);
                {#                                    HTTP_RESET_CONTENT#}
                                    if (jqXHR.status == 205) {
                                        resolvePromise(response);
                                        Swal.onAfterClose = function () {
                                            location.reload();
                                        };
                                    }
                                }).fail(function (jqXHR, textStatus, errorThrown) {
                                    rejectPromise(errorThrown);
                                    Log(jqXHR.status);
                                    //Log(jqXHR.responseText);
                                    //Log(errorThrown);
                {#                                    HTTP_BAD_REQUEST#}
                                    if (jqXHR.status == 400) {
                                        Swal.updateContent(jqXHR.responseText);
                                    } else {
                                        Swal.showValidationMessage(
                                                'Request failed:'
                                                );
                                    }
                                    //Log(textStatus);
                                }).always(function () {
                                    Swal.done();
                                });
                                return miPrimeraPromise;
                            };
                            const swal = Swal.fire({
                                title: '{{ popup.loading_text|trans }}',
                                showConfirmButton: false,
                                showCancelButton: false,
                                allowOutsideClick: false,
                                confirmButtonColor: '#3085d6',
                                //cancelButtonColor: '#d33',
                                confirmButtonText: '{{ popup.confirm_button_text|trans }}',
                                cancelButtonText: '{{ popup.cancel_button_text|trans }}',
                                onAfterClose: function () {
                                    if (Swal.onAfterClose) {
                                        Swal.onAfterClose();
                                        Swal.onAfterClose = null;
                                    }
                                },
                                //showLoaderOnConfirm: true,
                                preConfirm: function (p) {
                                    if (Swal.onConfirm) {
                                        //Swal.loading();
                                        var promise = Swal.onConfirm(p);
                                        /*
                                         Swal.update({
                                         //title: '{{ popup.loading_text|trans }}',
                                         html: null,
                                         showConfirmButton: true,
                                         showCancelButton: false,
                                         });
                                         */
                                        Swal.loading();
                                        return promise;
                                    }
                                    return true;
                                },
                                onBeforeOpen: (p) => {
                                    Swal.showLoading();
                                    //console.log("sss");
                                    $.get("{{ uri }}", function (data) {
                                        Swal.updateContent(data);
                                    })
                                            .always(function (r) {
                                                Swal.done();
                                                if (r.status >= 500 && r.status <= 500) {
                                                    Swal.close();
                                                }
                                            });
                                }
                            }).then((result) => {
                                /* Read more about handling dismissals below */
                                if (Swal.onClose) {
                                    Swal.onClose(result);
                                    Swal.onClose = null;
                                }
                            });
                            return false;
                        });
                    };
                    document.addEventListener("DOMContentLoaded", function (event) {
                        init{{ btnId }}();
                    });
                    if (document.readyState == "complete" || document.readyState == "interactive") {
                        init{{ btnId }}();
                    }
            </script>
        {% elseif question.text is not null %}
            <script>
                document.addEventListener("DOMContentLoaded", function (event) {
                    $("#{{ btnId }}").on("click", function () {
                        Swal.fire({
                            title: '{{ question.title }}',
                            text: "{{ question.text }}",
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '{{ question.confirm_button_text|trans }}',
                            cancelButtonText: '{{ question.cancel_button_text|trans }}',
                        }).then((result) => {
                            if (result.value) {
                {{ question.on_confirm|raw }}
                                                }
                                            });
                                            return false;
                                        });
                                    });
            </script>
        {% endif %}
    {% else %}
        {#        TODO deshabilitar boton si tiene texto o desaparecer#}
    {% endif %}
{% endmacro button %}

{# Constructor de "a" generico #}
{% macro a(params) %}
    {% set defaults = { label: null,icon: null,icon_prepend:null, class: 'btn btn-primary',icon_separator: "mr-2",target: null,attr: {},question: { title: null, text: null},
        role: {} } %}
    {% set options = defaults|resolve_options(params,{ required: ["href"] }) %}

    {% set id = random() %}
    {% set aId = "btn_a_"~id %}

    {% set attr = options.attr %}

    {% set question = { title: ("question.title"|trans),confirm_button_text: "question.button.yes",cancel_button_text: "question.button.no" }|resolve_options(options.question,{ required: ["text"] }) %}
    {% set role = { attributes: null,subject: null,message: null }|resolve_options(options.role,{ required: ["attributes","subject"] }) %}

    {% if role.attributes is null or is_granted(role.attributes,role.subject) %}
        {% set href = build_with_referer(options.href,app.request.requestUri) %}
        {% set attr = attr|merge({class: options.class, href: href, target: options.target,id: aId}) %}
        <a {{ block('attributes') }}>{% if options.icon_prepend %}<i class="{{ options.icon_prepend }} {{ options.icon_separator }}"></i>{% endif %}<i class="{{ options.icon }} {{ options.icon_separator }}"></i>{{ options.label|trans }}</a>
                {% if question.text is not null %}
            <script>
                document.addEventListener("DOMContentLoaded", function (event) {
                    $("#{{ aId }}").on("click", function () {
                        Swal.fire({
                            title: '{{ question.title }}',
                            text: "{{ question.text }}",
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: '{{ question.confirm_button_text|trans }}',
                            cancelButtonText: '{{ question.cancel_button_text|trans }}',
                        }).then((result) => {
                            if (result.value) {
                                window.location.href = $("#{{ aId }}").attr("href");
                            }
                        });
                        return false;
                    });
                });
            </script>
        {% endif %}
    {% else %}
        {% if role.message is not null %}
            {% set attr = attr|merge({class: options.class ~ " disabled", href: ""}) %}
            <a {{ block('attributes') }}>{% if options.icon_prepend %}<i class="{{ options.icon_prepend }} {{ options.icon_separator }}"></i>{% endif %}<i class="{{ options.icon }} {{ options.icon_separator }}"></i>{{ options.label|trans }}</a>
        {% else %}
            {#        TODO deshabilitar boton si tiene texto o desaparecer#}
        {% endif %}
    {% endif %}
{% endmacro a %}